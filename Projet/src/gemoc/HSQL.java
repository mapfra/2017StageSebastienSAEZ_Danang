package gemoc;

import java.sql.DriverManager;
import java.sql.SQLException;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;
import java.util.Date;
/*
 * Cette classe permet de gerer une base de donnée local au raspberry grace a un fichier
 */
public class HSQL {
	private java.sql.Connection con;
	private java.sql.Statement stmt;
	private String username = "";
	private String password = "";
	private String nomBD = "";
	private java.sql.ResultSet result;
	private int id = 0;
	
	//Initalisase la base de donnée
	public HSQL(String nomdb,String user, String pass) throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException{
	      this.username = user;
	      this.nomBD = nomdb;
	      this.password = pass;
	      Class.forName("org.hsqldb.jdbc.JDBCDriver");
	      con = DriverManager.getConnection("jdbc:hsqldb:file:./bdd", "sb", "");
	      stmt = con.createStatement();
	      
	   }

	//Cette methode permet de créer la table RAWDATA 
	public void createTableRawData(){
	      try {
		         Class.forName("org.hsqldb.jdbc.JDBCDriver");
		         con = DriverManager.getConnection("jdbc:hsqldb:file:./bdd", "sb", "");
		         stmt = con.createStatement();
		         stmt.executeUpdate("CREATE TABLE "+this.nomBD+" ( id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
		         		+ "UserId VARCHAR(20) NOT NULL,"
		        		+ "Timezone VARCHAR(10) NOT NULL,"
		         		+ "Date Date NOT NULL, "
		         		+ "Time Time NOT NULL, "
		         		+ "Samplekind VARCHAR(10) NOT NULL,"
		         		+ "idSensor INT NOT NULL, "
		         		+ "NameSensor VARCHAR(20) NOT NULL, "
		         		+ "DataSensor DOUBLE NOT NULL, "
		         		+ "UnitSensor VARCHAR(20) NOT NULL, "
		         		+ "TypeSensor VARCHAR(20) NOT NULL, "
		         		+ "Location VARCHAR(20) NOT NULL "
		         		+ ");");
		         System.out.println("Table created successfully");
		      }  catch (Exception e) {
		        // e.printStackTrace(System.out);
		    	//  System.out.println("Douche existe deja");
		      }
		
	}
	
	//Cette methode permet de créer la table SMARTDATA / SSDB 
	public void createTableSmartData(){
	      try {
		         Class.forName("org.hsqldb.jdbc.JDBCDriver");
		         con = DriverManager.getConnection("jdbc:hsqldb:file:./bdd", "sb", "");
		         stmt = con.createStatement();
		         stmt.executeUpdate("CREATE TABLE "+this.nomBD+" ( id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
		         		+ "UserId VARCHAR(20) NOT NULL,"
		        		+ "Timezone VARCHAR(10) NOT NULL,"
		         		+ "Date Date NOT NULL, "
		         		+ "Time Time NOT NULL, "
		         		+ "Action VARCHAR(50) NOT NULL, "
		         		+ "Seuil DOUBLE NOT NULL, "
		         		+ "DataSensor DOUBLE NOT NULL, "
		         		+ "TypeSensor VARCHAR(20) NOT NULL "
		         		+ ");");
		         System.out.println("Table created successfully");
		      }  catch (Exception e) {
		        // e.printStackTrace(System.out);
		    	 // System.out.println("SmartData existe deja");
		      }
		
	}
	
	//Cette methode permet de créer la table ActivityTrackingresult / ATRDB 
	public void createTableActivityTrackingResult(){
	      try {
		         Class.forName("org.hsqldb.jdbc.JDBCDriver");
		         con = DriverManager.getConnection("jdbc:hsqldb:file:./bdd", "sb", "");
		         stmt = con.createStatement();
		         stmt.executeUpdate("CREATE TABLE "+this.nomBD+" ( id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
		         		+ "UserId VARCHAR(20) NOT NULL,"
		        		+ "Timezone VARCHAR(10) NOT NULL,"
		         		+ "Date Date NOT NULL, "
		         		+ "Time Time NOT NULL, "
		         		+ "Action VARCHAR(50) NOT NULL "
		         		+ ");");
		         System.out.println("Table created successfully");
		      }  catch (Exception e) {
		        // e.printStackTrace(System.out);
		    	 // System.out.println("ATR existe deja");
		      }
		
	}
	
	
	// Cette method permet d'inserer un enregistrement / ligne dans la table RAWDATA
	public void insertRowRawData(String v1, String v2, String v3, String v4, String v5, int v6, String v7, Double v8, String v9, String v10, String v11) {

		 try { 
	         Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
	         stmt.executeUpdate("INSERT INTO "+ this.nomBD+" VALUES (NULL,'"+v1+"','"+v2+"','"+v3+"','"+v4+"','"+v5+"',"+v6+",'"+v7+"',"+v8+",'"+v9+"','"+v10+"','"+v11+"')"); 
	         con.commit();
	        // System.out.println("Rows inserted successfully"); 
	      }catch (Exception e) { 
	         e.printStackTrace(System.out); 
	      } 
	      
	     
	   }
	
	// Cette method permet d'inserer un enregistrement / ligne dans la table SSDB/SMARTDATA
	public void insertRowSD(String v1, String v2, String v3, String v4, String v5, String v6, String v7, String v8) {

		 try { 
	         Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
	         stmt.executeUpdate("INSERT INTO "+ this.nomBD+" VALUES (NULL,'"+v1+"','"+v2+"','"+v3+"','"+v4+"','"+v5+"','"+v6+"','"+v7+"','"+v8+"')"); 
	         con.commit();
	        // System.out.println("Rows inserted successfully"); 
	      }catch (Exception e) { 
	         e.printStackTrace(System.out); 
	      } 
	      
	     
	   }
	// Cette method permet d'inserer un enregistrement / ligne dans la table ATRDB / ActivityResultTracking
	public void insertRowATR(String v1, String v2, String v3, String v4, String v5) {

		 try { 
	         Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
	         stmt.executeUpdate("INSERT INTO "+ this.nomBD+" VALUES (NULL,'"+v1+"','"+v2+"','"+v3+"','"+v4+"','"+v5+"')"); 
	         con.commit();
	        // System.out.println("Rows inserted successfully"); 
	      }catch (Exception e) { 
	         e.printStackTrace(System.out); 
	      } 
	      
	     
	   }
	
	// Affiche la table RAWDATA
	public void displayRowsRawData() {
		// TODO Auto-generated method stub
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD);
	         stmt.executeQuery("SHUTDOWN");
	         stmt.close();
	         con.close() ;
	         while(result.next()){
	            System.out.println(result.getInt("id")+"|"
	         +result.getString("UserId")+"|"
	         +result.getString("Timezone")+"|"
	         +result.getDate("Date")+"|"
	         +result.getTime("Time")+"|"
	         +result.getInt("idSensor")+"|"
	         +result.getString("NameSensor")+"|"
	         +result.getDouble("DataSensor")+"|"
	         +result.getString("UnitSensor")+"|"
	         +result.getString("TypeSensor")+"|"
	         +result.getString("Location")
	         );
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
	}
	
	//Affiche la table SmartData
	public void displayRowsSD() {
		// TODO Auto-generated method stub
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD);
	         stmt.executeQuery("SHUTDOWN");
	         stmt.close();
	         con.close() ;
	         while(result.next()){
	            System.out.println(result.getInt("id")+"|"
	         +result.getString("UserId")+"|"
	         +result.getString("Timezone")+"|"
	         +result.getDate("Date")+"|"
	         +result.getTime("Time")+"|"
	         +result.getDouble("Seuil")+"|"
	         +result.getDouble("DataSensor")+"|"
	         +result.getString("TypeSensor")+"|"
	         +result.getString("Action")
	         );
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
	}
	//recupere la deniere valeur enregistré d'humidité
	public String getSmartDataHumidity(){
		String r = "";
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD + " WHERE Action LIKE '%humidity%'");
	         while(result.next()){
	         r = result.getString("Action");
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
		return r;
	}
	//recupere la deniere valeur enregistré de lumiere
	public String getSmartDataLight(){
		String r = "";
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD + " WHERE Action LIKE '%light%'");
	         while(result.next()){
	         r = result.getString("Action");
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
		return r;
	}
	
	//recupere la deniere valeur enregistré de présence
	public String getSmartDataPIR(){
		String r = "";
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD + " WHERE Action LIKE '%The person is%'");
	         while(result.next()){
	         r = result.getString("Action");
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
		return r;
	}
	
	//Affiche la table ActivityResultTracking / ATRDB
	public void displayRowsATR() {
		// TODO Auto-generated method stub
		try {
	         result = stmt.executeQuery( "SELECT * FROM " +  this.nomBD);
	         stmt.executeQuery("SHUTDOWN");
	         stmt.close();
	         con.close() ;
	         while(result.next()){
	            System.out.println(result.getInt("id")+"|"
	         +result.getString("UserId")+"|"
	         +result.getString("Timezone")+"|"
	         +result.getDate("Date")+"|"
	         +result.getTime("Time")+"|"
	         +result.getString("Action")
	         );
	         }
	        
	      } catch (Exception e) {
	         e.printStackTrace(System.out);
	      }
		
	}

	
		
	}
